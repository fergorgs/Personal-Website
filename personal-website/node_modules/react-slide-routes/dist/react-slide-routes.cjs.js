'use strict';

var react$1 = require('@emotion/react');
var react = require('react');
var t = require('prop-types');
var reactRouterDom = require('react-router-dom');
var reactTransitionGroup = require('react-transition-group');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var t__default = /*#__PURE__*/_interopDefaultLegacy(t);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var _excluded = ["element"];

var _templateObject;

var getCss = function getCss(duration, timing, direction) {
  return react$1.css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n  display: grid;\n\n  .item {\n    grid-area: 1 / 1 / 2 / 2;\n\n    &:not(:only-child) {\n      &.", "-enter-active, &.", "-exit-active {\n        transition: transform ", "ms ", ";\n      }\n    }\n  }\n\n  &.slide {\n    overflow: hidden;\n\n    // back\n    .back-enter {\n      transform: translateX(-100%);\n    }\n    .back-enter-active {\n      transform: translateX(0);\n    }\n    .back-exit {\n      transform: translateX(0);\n    }\n    .back-exit-active {\n      transform: translateX(100%);\n    }\n\n    // forward\n    .forward-enter {\n      transform: translateX(100%);\n    }\n    .forward-enter-active {\n      transform: translateX(0);\n    }\n    .forward-exit {\n      transform: translateX(0);\n    }\n    .forward-exit-active {\n      transform: translateX(-100%);\n    }\n  }\n\n  &.vertical-slide {\n    overflow: hidden;\n\n    // back\n    .back-enter {\n      transform: translateY(-100%);\n    }\n    .back-enter-active {\n      transform: translateY(0);\n    }\n    .back-exit {\n      transform: translateY(0);\n    }\n    .back-exit-active {\n      transform: translateY(100%);\n    }\n\n    // forward\n    .forward-enter {\n      transform: translateY(100%);\n    }\n    .forward-enter-active {\n      transform: translateY(0);\n    }\n    .forward-exit {\n      transform: translateY(0);\n    }\n    .forward-exit-active {\n      transform: translateY(-100%);\n    }\n  }\n\n  &.rotate {\n    perspective: 2000px;\n\n    .item {\n      backface-visibility: hidden;\n    }\n\n    // back\n    .back-enter {\n      transform: rotateY(-180deg);\n    }\n    .back-enter-active {\n      transform: rotateY(0);\n    }\n    .back-exit {\n      transform: rotateY(0);\n    }\n    .back-exit-active {\n      transform: rotateY(180deg);\n    }\n\n    // forward\n    .forward-enter {\n      transform: rotateY(180deg);\n    }\n    .forward-enter-active {\n      transform: rotateY(0);\n    }\n    .forward-exit {\n      transform: rotateY(0);\n    }\n    .forward-exit-active {\n      transform: rotateY(-180deg);\n    }\n  }\n"])), direction, direction, duration, timing);
};

var CACHE_KEY = '::slide::history::';

var SlideRoutes = function SlideRoutes(_ref) {
  var animation = _ref.animation,
      pathList = _ref.pathList,
      duration = _ref.duration,
      timing = _ref.timing,
      destroy = _ref.destroy,
      children = _ref.children;
  var location = reactRouterDom.useLocation();
  var pathname = location.pathname;
  var hasMount = react.useRef(false);
  var pathQueue = react.useRef();
  var SHOULD_UPDATE_CACHE = react.useRef(false);
  var prevPath = react.useRef();
  var direction = react.useRef('');

  if (!hasMount.current) {
    // mount
    hasMount.current = true;

    if (pathList.length > 0) {
      prevPath.current = pathname;
    } else {
      var cacheList = sessionStorage.getItem(CACHE_KEY);

      if (!cacheList) {
        prevPath.current = pathname;
        pathQueue.current = [pathname];
        SHOULD_UPDATE_CACHE.current = true;
      } else {
        pathQueue.current = JSON.parse(cacheList);
        prevPath.current = pathQueue.current[pathQueue.current.length - 1];
      }
    }
  } else {
    // update
    if (prevPath.current !== pathname) {
      if (pathList.length > 0) {
        var prevIndex = pathList.indexOf(prevPath.current);
        var nextIndex = pathList.indexOf(pathname);
        direction.current = prevIndex < nextIndex ? 'forward' : 'back';
      } else {
        var _nextIndex = pathQueue.current.lastIndexOf(pathname);

        if (_nextIndex === -1) {
          direction.current = 'forward';
          pathQueue.current.push(pathname);
        } else {
          direction.current = 'back';
          pathQueue.current.length = _nextIndex + 1;
        }

        SHOULD_UPDATE_CACHE.current = true;
      }

      prevPath.current = pathname;
    }
  }

  var cssProps = react.useMemo(function () {
    return destroy ? {
      timeout: duration
    } : {
      addEndListener: function addEndListener() {}
    };
  }, [destroy, duration]);
  react.useEffect(function () {
    if (SHOULD_UPDATE_CACHE.current) {
      SHOULD_UPDATE_CACHE.current = false;
      sessionStorage.setItem(CACHE_KEY, JSON.stringify(pathQueue.current));
    }
  });
  var routList = react.useMemo(function () {
    return react.Children.map(children, function (child) {
      if (!child) return child;

      var _child$props = child.props,
          element = _child$props.element,
          restProps = _objectWithoutPropertiesLoose(_child$props, _excluded);

      if (!element || element.props.replace === true) return child;
      var newElement = react$1.jsx("div", {
        className: "item"
      }, element);
      return _extends({}, child, {
        props: _extends({}, restProps, {
          element: newElement
        })
      });
    });
  }, [children]);
  return react$1.jsx(reactTransitionGroup.TransitionGroup, {
    className: "slide-routes " + animation,
    childFactory: function childFactory(child) {
      return /*#__PURE__*/react.cloneElement(child, {
        classNames: direction.current
      });
    },
    css: getCss(duration, timing, direction.current)
  }, react$1.jsx(reactTransitionGroup.CSSTransition, Object.assign({
    key: pathname
  }, cssProps), react$1.jsx(reactRouterDom.Routes, {
    location: location
  }, routList)));
};

SlideRoutes.defaultProps = {
  animation: 'slide',
  pathList: [],
  duration: 200,
  timing: 'ease',
  destroy: true
};
SlideRoutes.propTypes = {
  animation: t__default["default"].oneOf(['slide', 'vertical-slide', 'rotate']),
  pathList: t__default["default"].array,
  duration: t__default["default"].number,
  timing: t__default["default"].oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),
  destroy: t__default["default"].bool,
  children: t__default["default"].node
};

module.exports = SlideRoutes;
